# docker-compose.yml (VERSÃƒO FINAL E CORRETA)
services:
  mapoteca_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mapoteca_app
    ports:
      - "3000:3000"
    volumes:
      - ./temp_uploads_mapoteca:/app/temp_uploads
      - sip_storage:/app/temp_ingestao_sip
      - aip_output:/app/output_normalizado
    environment:
      - DATABASE_URL=postgresql://user:password@mapoteca_db_container:5432/mapoteca_db?schema=public
      - KAFKA_BROKER=kafka:29092
      - INGESTION_SERVICE_URL=http://ingestao_app:3001
      - STORAGE_SERVICE_URL=http://storage_app:3003
    networks:
      - minha-rede-app
    depends_on:
      mapoteca_db_container:
        condition: service_healthy
      ingestao_app:
        condition: service_healthy
      storage_app:
        condition: service_started

  ingestao_app:
    build:
      context: ../microservico-ingestao
      dockerfile: Dockerfile
    container_name: ingestao_app
    ports:
      - "3001:3001"
    volumes:
      # - ../microservico-ingestao:/app
      # - /app/node_modules
      - sip_storage:/app/temp_ingestao_sip
    environment:
      - KAFKA_BROKER=kafka:29092
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - minha-rede-app
    depends_on:
      kafka:
        condition: service_healthy

  processing_app:
    build:
      context: ../microservico-processamento
      dockerfile: Dockerfile
    container_name: processing_app
    environment:
      - KAFKA_BROKER=kafka:29092
    volumes:
      - sip_storage:/app/temp_ingestao_sip
      - aip_output:/app/output_normalizado
    networks:
      - minha-rede-app
    depends_on:
      kafka:
        condition: service_healthy

  gestao_dados_app:
    build:
      context: ../microservico-gestao-dados
      dockerfile: Dockerfile
    container_name: gestao_dados_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://user:password@preservacao_db:5432/preservacao_db
    networks:
      - minha-rede-app
    depends_on:
      preservacao_db:
        condition: service_healthy

  storage_app:
    build:
      context: ../microservico-minio
      dockerfile: Dockerfile
    container_name: storage_app
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
      - S3_REGION=us-east-1
      - S3_ENDPOINT=http://minio:9000
      - S3_ACCESS_KEY=minioadmin
      - S3_SECRET_KEY=minioadmin
    networks:
      - minha-rede-app
    depends_on:
      minio:
        condition: service_healthy

  minio:
    image: quay.io/minio/minio
    container_name: minio_server
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DOMAIN=minio
      - MINIO_BROWSER_REDIRECT_URL=http://localhost:9001
    volumes:
      - minio_data:/data
    networks:
      - minha-rede-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  preservacao_db:
    image: postgres:13-alpine
    container_name: preservacao_db
    ports:
      - "5434:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=preservacao_db
    volumes:
      - preservacao_db_data:/var/lib/postgresql/data
    networks:
      - minha-rede-app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d preservacao_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  mapoteca_db_container:
    image: postgres:13-alpine
    container_name: mapoteca_db_container
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=mapoteca_db
    volumes:
      - mapoteca_db_data:/var/lib/postgresql/data
    networks:
      - minha-rede-app
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mapoteca_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    networks:
      - minha-rede-app
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    networks:
      - minha-rede-app
    depends_on:
      - zookeeper
      
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: -1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 40s

    command: >
      sh -c "
        echo '>>> Waiting 20 seconds for Zookeeper to be ready...' &&
        sleep 20 &&
        echo '>>> Zookeeper should be ready, starting Kafka...' &&
        /etc/confluent/docker/run
      "

networks:
  minha-rede-app:
    driver: bridge

volumes:
  mapoteca_db_data:
  preservacao_db_data:
  sip_storage:
  minio_data:
  aip_output: